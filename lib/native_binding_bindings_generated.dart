// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/native_binding.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class NativeBindingBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeBindingBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeBindingBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void Init() {
    return _Init();
  }

  late final _InitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('Init');
  late final _Init = _InitPtr.asFunction<void Function()>();

  void SetupPipeline() {
    return _SetupPipeline();
  }

  late final _SetupPipelinePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('SetupPipeline');
  late final _SetupPipeline = _SetupPipelinePtr.asFunction<void Function()>();

  void StartPipeline() {
    return _StartPipeline();
  }

  late final _StartPipelinePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('StartPipeline');
  late final _StartPipeline = _StartPipelinePtr.asFunction<void Function()>();

  void FreeResource() {
    return _FreeResource();
  }

  late final _FreeResourcePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('FreeResource');
  late final _FreeResource = _FreeResourcePtr.asFunction<void Function()>();

  SelectOptions GetDeviceOptions() {
    return _GetDeviceOptions();
  }

  late final _GetDeviceOptionsPtr =
      _lookup<ffi.NativeFunction<SelectOptions Function()>>('GetDeviceOptions');
  late final _GetDeviceOptions =
      _GetDeviceOptionsPtr.asFunction<SelectOptions Function()>();

  void SetRenderFunction(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Uint8>)>>
        RenderFunction,
  ) {
    return _SetRenderFunction(
      RenderFunction,
    );
  }

  late final _SetRenderFunctionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Uint8>)>>)>>('SetRenderFunction');
  late final _SetRenderFunction = _SetRenderFunctionPtr.asFunction<
      void Function(
          ffi.Pointer<
              ffi
              .NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Uint8>)>>)>();

  void SetVideoDimensions(
    int iWidth,
    int iHeight,
  ) {
    return _SetVideoDimensions(
      iWidth,
      iHeight,
    );
  }

  late final _SetVideoDimensionsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int, ffi.Int)>>(
          'SetVideoDimensions');
  late final _SetVideoDimensions =
      _SetVideoDimensionsPtr.asFunction<void Function(int, int)>();

  /// A very short-lived native function.
  ///
  /// For very short-lived functions, it is fine to call them on the main isolate.
  /// They will block the Dart execution while running the native function, so
  /// only do this for native functions which are guaranteed to be short-lived.
  int sum(
    int a,
    int b,
  ) {
    return _sum(
      a,
      b,
    );
  }

  late final _sumPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.IntPtr)>>(
          'sum');
  late final _sum = _sumPtr.asFunction<int Function(int, int)>();

  /// A longer lived native function, which occupies the thread calling it.
  ///
  /// Do not call these kind of native functions in the main isolate. They will
  /// block Dart execution. This will cause dropped frames in Flutter applications.
  /// Instead, call these native functions on a separate isolate.
  int sum_long_running(
    int a,
    int b,
  ) {
    return _sum_long_running(
      a,
      b,
    );
  }

  late final _sum_long_runningPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.IntPtr, ffi.IntPtr)>>(
          'sum_long_running');
  late final _sum_long_running =
      _sum_long_runningPtr.asFunction<int Function(int, int)>();
}

final class _SelectOptions extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<ffi.Char>> m_vOptions;

  @ffi.Size()
  external int m_iSize;
}

typedef SelectOptions = _SelectOptions;
